package com.cybersoft.dictionary;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.Scanner;

public class Dictionary {
	CustomDoubleLinkedList<Word> dictionary;
	boolean flag = false;

	public Dictionary() throws IOException {
		dictionary = new CustomDoubleLinkedList<Word>();
		readFile();
	}

	public void xuLyTuDien(Scanner sc) {
		int option;
		option = Integer.parseInt(sc.nextLine());
		System.out.println("1: Nhap tu moi");
		System.out.println("2: Hieu chinh tu");
		System.out.println("3: Xoa tu");
		System.out.println("4: Tra tu");
		System.out.println("5: Thoat");

		switch (option) {
		case 1:
			Word word = new Word();
			word.input(sc);
			dictionary.insertAtTail(word);
			flag = true;
			break;

		case 2:
			System.out.println("Tu ban muon chinh sua: ");
			String tempWord = sc.nextLine();
			Word wordEdit = this.search(tempWord);
			System.out.print(wordEdit.toString());
			if (wordEdit != null) {
				String temp = "";
				System.out.print("Sua loai tu (" + wordEdit.getType() + "): ");
				temp = sc.nextLine();
				if (temp == "")
					return;
				wordEdit.setType(temp);
			}
//			for (int i = 0; i < Word.MAX_LENGTH_MEANING; i++) {
//				String temp = "";
//				System.out.print("Sua nghia " + (i + 1) + " (" + wordEdit.getMeanings()[i] + "): ");
//				temp = sc.nextLine();
//				if (temp == "")
//					break;
//				wordEdit.getMeanings()[i] = temp;
//			}
			int count = 0;

			flag = true;
			break;

		case 3:

			break;

		case 4:
			System.out.print("Nhap tu ban muon tra (Eng): ");
			String wordFind = sc.nextLine();
			Word res = this.search(wordFind);
			if (res!=null) {
				res.toString()
			}
			break;

		default:
			break;
		}
	}
	
	public void readFile() throws IOException {
		boolean flag = true;
		String line = "";
		String nextLine = "";
//		List<Word> words = new ArrayList<Word>();
		Path path = FileSystems.getDefault().getPath("").toAbsolutePath();
		BufferedReader bufferedReader = new BufferedReader(
				new FileReader(path + "/src/com/cybersoft/dictionary/data.EV.txt"));
		BufferedReader bufferedReaderNextLine = new BufferedReader(
				new FileReader(path + "/src/com/cybersoft/dictionary/data.EV.txt"));

		nextLine = bufferedReaderNextLine.readLine();
		Word word = new Word();
		while ((line = bufferedReader.readLine()) != null) {
			nextLine = bufferedReaderNextLine.readLine();
			if (line.isEmpty()) {
				continue;
			}

			String key = String.valueOf(line.charAt(0));
			switch (key) {
			case "@":
				word.setWord(line.replaceFirst("@", ""));
				flag = false;
				break;
			case "*":
				word.setType(line.replaceFirst("\\*", ""));
				flag = false;
				break;
			case "-":
				word.getMeanings().add(line.replaceFirst("-", ""));
				if (nextLine != null) {
					if (nextLine.startsWith("-")) {
						flag = false;
					} else if (nextLine.startsWith("@")) {
						flag = true;

					}
				} else {
					flag = true;
				}
				break;

			default:
				break;
			}

			if (flag == true) {
				System.out.println(word.toString());
				dictionary.insertAtTail(word);
				word = new Word();
			}

		}
		bufferedReader.close();

	}

	public Word search(String key) {

		if (dictionary.head == null) {
			return null;
		}
		NodeDouble<Word> current = dictionary.head;
		while (current != null) {

			if (current.data.getWord().trim().toLowerCase().equals(key.trim().toLowerCase())) {
				return current.data;
			}

			current = current.next;
		}
		return null;
	}
}
